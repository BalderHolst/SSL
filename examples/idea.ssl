Main Idea: Make a language that always compiles, and uses the entire input as a program.

Everything is a program in the stupid-shader-language. A program is a function that takes normalized x and y, and transforms maps to a color.

Idea:
The language that characters that correspond to commands. Your could write a simple program like this

(x + y) % 0.7

The language will have two types: number and color. Boolean expressions will evaluate to a number as in c (0 or 1). Expressions should be defined between all types in the language.

The variable `r` wil contain the result of the previous statement.

x + y
{r, r*2, r/3}

Expressions next to each other mean multiplication
xy == x*y

Comma separated expressions will be evaluated to be the average of the expressions.

Any unclosed parenthesis will be automatically closed at the end of each statement. A closing parenthesis will be flipped, if there is no starting parenthesis to close.

A situation like this will be resolved as follows:
   ({r, r*2, r/3)}
=> ({r, r*2, r/3})} - Close inner paren
                  ^ - This will be re-interpreted as anther expression.

And the other way around
   {(r, r*2, r/3})
=> {(r, r*2, r/3)}{
=> {(r + r*2 + r/3)/3}{}
=> {(r + r*2 + r/3)/3}1
=> {(r + r*2 + r/3)/3, (r + r*2 + r/3)/3, (r + r*2 + r/3)/3}1

